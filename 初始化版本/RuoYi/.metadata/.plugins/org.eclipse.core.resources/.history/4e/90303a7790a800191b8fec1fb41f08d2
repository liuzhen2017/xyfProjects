package com.xinyunfu.service.impl;


import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.xinyunfu.constants.VIP;
import com.xinyunfu.jace.utils.ResponseInfo;
import com.xinyunfu.mapper.OrderTreeMapper;
import com.xinyunfu.mapper.UserPushMapper;
import com.xinyunfu.model.OrderTree;
import com.xinyunfu.model.TreeNo;
import com.xinyunfu.model.UserPackageOrder;
import com.xinyunfu.service.IOrderTreeService;
import com.xinyunfu.utils.RedisCommonUtil;

import lombok.extern.slf4j.Slf4j;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author jace
 * @since 2019-07-04
 */
@Service
@Slf4j
public class OrderTreeServiceImpl extends ServiceImpl<OrderTreeMapper, OrderTree> implements IOrderTreeService {
	
	
	@Autowired
	private UserPushMapper upMapper;
	
	@Autowired
	private UserPackageOrderServiceImpl upoService;
	
	@Autowired
	private TreeNoServiceImpl treeService;
	
	@Autowired
	private OrderTreeMapper mapper;
	
	@Value("${spring.free.button}")
	public String takeOn;
	
	@Autowired
	RedisCommonUtil redis;
	
	
	
	
	/**
	 *	执行订单树功能:
	 *   1.查询出userNo的推荐关系列表
	 * @return
	 * @throws Exception 
	 */
	public ResponseInfo<String> excuteOrderTree(UserPackageOrder upo) throws Exception{
		//获取推荐关系先
		String list = (null == redis.getCache(upo.getUserNo())?"":redis.getCache(upo.getUserNo()).toString());
		list = StringUtils.isEmpty(list)?upMapper.getPushList(upo.getUserNo()) : list;
		JSONArray pushlist = JSONObject.parseArray(list);
        if(null==pushlist) return new ResponseInfo<>("0001","推荐关系获取失败","");
		log.info("------------------查询用户:"+upo.getUserNo()+"的推荐链："+list);
		String userNo = "";
		for(int i = 0;i<pushlist.size();i++) {
			userNo = pushlist.getString(i);
			if(VIP.ADMIN_NODE_NO.equals(userNo)&&"take_on".equals(takeOn)) { //如果是系统节点,同时开启免费赠送模式
				log.info("************************************************************************************");
				freeGiving(userNo,upo);
			    return ResponseInfo.success(null);
			}else {//  推荐人不是系统节点，那么进行用户有效性查找
				if(upoService.checkUserVaild(userNo)) {  // 有效
					commonOrderTree(userNo, upo);
				    return ResponseInfo.success(null);
				}
			}
		}
		return null;
	}
	
	
	/**
	 * 刷新订单树，一个订单树进入会导致最少一，最多两个淘汰
	 * @return
	 * @throws Exception
	 */
	public boolean refreshTree() throws Exception {
		
		
		
		return false;
	}
	
	
	
	
	/**
	 * 免费赠送模式
	 * @return 
	 * @throws Exception 
	 */
	public void freeGiving(String userNo,UserPackageOrder upo) throws Exception {
		//查询有效的父节点
		log.info("---------------------------------free giving------------------------------------");
		TreeNo parent = treeService.presentedLazyUser();
		if(null==parent){//赠送给平台
			treeService.givingRoot(upo);
		}else {
			treeService.fullNode(parent, upo);
		}
	}
	
	
	/**
	 * 正常模式
	 * @throws Exception 
	 */
	public void commonOrderTree(String userNo,UserPackageOrder upo) throws Exception {
		TreeNo parent = treeService.getNodeByUserNo(userNo);
		treeService.insertNodeNoProcessor(parent, upo);
	}
	
	
	
	public OrderTree getNodeOfUpo(String nodeNo) {
		return mapper.getByNodeNo(nodeNo);
	}
	
	
	/**
	 * 查询是否存在有效的节点
	 * @param upo
	 * @return
	 */
	public int getValidNode(UserPackageOrder upo) {
		return mapper.getVailNodeNo(upo.getMainOrderNo());
	}


	/**
	 * 将nodeNo节点置为失效
	 * @param nodeNo
	 */
	public void updateSetEnables(String nodeNo) {
		mapper.updateSetEnables(nodeNo);
	}


	public Integer getSubmit(String mainOrderNo) {
	
		return mapper.getMainOrderSubmit(mainOrderNo);
	}
	
	
}
