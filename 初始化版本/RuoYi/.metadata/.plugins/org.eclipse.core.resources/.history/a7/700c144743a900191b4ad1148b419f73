package com.example.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

import com.example.utils.ThreadUtils;

import lombok.extern.slf4j.Slf4j;

@Component
@Aspect
@Slf4j
public class SpringAopConfig {

	SpringAopConfig(){System.out.println("=======================SpringAopConfig==============================");}
	
	
	@Pointcut("execution(* com.example.api.*.*(..))")
	public void weblog() {}
	
	@Around("weblog()")
	public Object around(ProceedingJoinPoint pjp) throws Throwable {
		long start = System.currentTimeMillis();
		String threadId = ThreadUtils.getThreadId();
		Object res = pjp.proceed();
        long end = System.currentTimeMillis();
        long elapsedTime = end - start;
        SystemLogStrategy ss = getSystemLogStrategy(pjp, elapsedTime, threadId, res.toString());
		return res;
	}
	
	
	
	private SystemLogStrategy getSystemLogStrategy(ProceedingJoinPoint pjp,long elapsedTime,String threadId,String result) {
		SystemLogStrategy ss = null;
		Signature s = pjp.getSignature();
		String className = s.getDeclaringTypeName();
		log.info("正在执行的切面属于"+className+" 类");
		String methodName = s.getName();
		log.info("正在执行的切面是"+methodName+" 方法");
		ss.setClassName(className);
		ss.setMethodName(methodName);
		ss.setElapsedTime(elapsedTime);
		ss.setThreadId(threadId);
		ss.setResult(result);
		return ss;
	}
	
}
