package com.xinyunfu.jace.config;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.servlet.support.RequestContext;

import com.xinyunfu.jace.utils.ThreadUtils;

import lombok.extern.slf4j.Slf4j;

@Component
@Aspect
@Slf4j
public class SpringAopConfig {

	SpringAopConfig(){System.out.println("============================SpringAopConfig==============================");}
	
	
	@Pointcut("execution(* com.*.controller.*.*(..))")
	public void weblog() {}
	
	@Around("weblog()")
	public Object around(ProceedingJoinPoint pjp) throws Throwable {
		
		long start = System.currentTimeMillis();
		String threadId = ThreadUtils.getThreadId();
		printRequest(pjp);
		Object res = pjp.proceed();
        long end = System.currentTimeMillis();
        long elapsedTime = end - start;
        SystemLogStrategy ss = getSystemLogStrategy(pjp, elapsedTime, threadId, res.toString());
		log.info(ss.toString());
        return res;
	}
	
	
	
	private SystemLogStrategy getSystemLogStrategy(ProceedingJoinPoint pjp,long elapsedTime,String threadId,String result) {
		SystemLogStrategy ss = new SystemLogStrategy();
		Signature s = pjp.getSignature();
		String className = s.getDeclaringTypeName();
		String methodName = s.getName();
		ss.setClassName(className);
		ss.setMethodName(methodName);
		ss.setElapsedTime(elapsedTime);
		ss.setThreadId(threadId);
		ss.setResult(result);
		return ss;
	}
	
	
	private void printRequest(ProceedingJoinPoint pjp) {
		RequestBean rb = new RequestBean();
		rb.setObj(pjp.getArgs());
		rb.setThreadId(ThreadUtils.getThreadId());
		rb.setUrl(pjp.getSignature().getDeclaringTypeName()+"."+pjp.getSignature().getName()+"()");
		log.info(rb.toString());
	}
	
}
